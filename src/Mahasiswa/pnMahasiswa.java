package Mahasiswa;

import Class.*;
import javax.swing.table.DefaultTableModel;
import static Main.menuBukuinduk.ContenPanel;
import org.json.*;

public class pnMahasiswa extends javax.swing.JPanel {

    public pnMahasiswa() {
        initComponents();
        loadTabel();
        loadAngkatan();
        loadProdi();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cAngkatan = new javax.swing.JComboBox<>();
        cProdi = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        tCari = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMahasiswa = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("DM Sans SemiBold", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(2, 154, 170));
        jLabel1.setText("Buku Induk > Mahasiswa");

        jLabel2.setFont(new java.awt.Font("DM Sans SemiBold", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(2, 154, 170));
        jLabel2.setText("Angkatan");

        jLabel3.setFont(new java.awt.Font("DM Sans SemiBold", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(2, 154, 170));
        jLabel3.setText("Prodi");

        cAngkatan.setFont(new java.awt.Font("DM Sans SemiBold", 1, 12)); // NOI18N
        cAngkatan.setForeground(new java.awt.Color(2, 154, 170));
        cAngkatan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Semua" }));
        cAngkatan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cAngkatanActionPerformed(evt);
            }
        });

        cProdi.setFont(new java.awt.Font("DM Sans SemiBold", 1, 12)); // NOI18N
        cProdi.setForeground(new java.awt.Color(2, 154, 170));
        cProdi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Semua" }));
        cProdi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cProdiActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("DM Sans SemiBold", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(2, 154, 170));
        jLabel4.setText("CARI");

        tCari.setFont(new java.awt.Font("DM Sans SemiBold", 1, 12)); // NOI18N
        tCari.setForeground(new java.awt.Color(2, 154, 170));
        tCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tCariKeyTyped(evt);
            }
        });

        tbMahasiswa.setFont(new java.awt.Font("DM Sans SemiBold", 0, 12)); // NOI18N
        tbMahasiswa.setForeground(new java.awt.Color(2, 154, 170));
        tbMahasiswa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMahasiswa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMahasiswaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbMahasiswa);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1060, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(28, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(cAngkatan, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cProdi, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4)))))
                        .addGap(18, 18, 18)
                        .addComponent(tCari, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cAngkatan, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cProdi, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(tCari, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cAngkatanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cAngkatanActionPerformed
        if (cProdi.getSelectedItem().equals("Semua") && cAngkatan.getSelectedItem().equals("Semua")) {
            loadTabel();
        } else if (!cProdi.getSelectedItem().equals("Semua") && cAngkatan.getSelectedItem().equals("Semua")) {
            Prodi.setProdi(cProdi.getSelectedItem().toString());
            tampilProdi();
        } else if (cProdi.getSelectedItem().equals("Semua") && !cAngkatan.getSelectedItem().equals("Semua")) {
            int semester = Integer.parseInt(cAngkatan.getSelectedItem().toString());
            Angkatan.setAngkatan(semester);
            tampilAngkatan();
        } else if (!cProdi.getSelectedItem().equals("Semua") && !cAngkatan.getSelectedItem().equals("Semua")) {
            int semester = Integer.parseInt(cAngkatan.getSelectedItem().toString());
            mahasiswa.setProdi(cProdi.getSelectedItem().toString());
            mahasiswa.setAngkatan(semester);
            tampilDua();

        }
    }//GEN-LAST:event_cAngkatanActionPerformed

    private void cProdiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cProdiActionPerformed
        if (cProdi.getSelectedItem().equals("Semua") && cAngkatan.getSelectedItem().equals("Semua")) {
            loadTabel();
        } else if (!cProdi.getSelectedItem().equals("Semua") && cAngkatan.getSelectedItem().equals("Semua")) {
            Prodi.setProdi(cProdi.getSelectedItem().toString());
            tampilProdi();
        } else if (cProdi.getSelectedItem().equals("Semua") && !cAngkatan.getSelectedItem().equals("Semua")) {
            int angkatan = Integer.parseInt(cAngkatan.getSelectedItem().toString());
            Angkatan.setAngkatan(angkatan);
            tampilAngkatan();
        } else if (!cProdi.getSelectedItem().equals("Semua") && !cAngkatan.getSelectedItem().equals("Semua")) {
            int angkatan = Integer.parseInt(cAngkatan.getSelectedItem().toString());
            mahasiswa.setProdi(cProdi.getSelectedItem().toString());
            mahasiswa.setAngkatan(angkatan);
            tampilDua();

        }
    }//GEN-LAST:event_cProdiActionPerformed

    private void tCariKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tCariKeyTyped
        mahasiswa.setSearch(tCari.getText());
        tampilSearch();
    }//GEN-LAST:event_tCariKeyTyped

    private void tbMahasiswaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMahasiswaMouseClicked
        int baris = tbMahasiswa.rowAtPoint(evt.getPoint());
        mahasiswa.setBaris(baris);

        ContenPanel.removeAll();
        ContenPanel.add(new pnProfil());
        ContenPanel.revalidate();
        ContenPanel.repaint();
    }//GEN-LAST:event_tbMahasiswaMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cAngkatan;
    private javax.swing.JComboBox<String> cProdi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField tCari;
    private javax.swing.JTable tbMahasiswa;
    // End of variables declaration//GEN-END:variables
    void loadTabel() {

        try {
            mahasiswa mhs = new mahasiswa();
            JSONObject obj = mhs.getMahasiswa();

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("No");
            model.addColumn("Nim");
            model.addColumn("Nama");
            model.addColumn("Jenis Kelamin");
            model.addColumn("Angkatan");
            model.addColumn("Prodi");

            int rows = obj.getInt("rows");
            JSONArray results = obj.getJSONArray("results");
            mahasiswa.setDataMhs(results);
            if (rows != 0) {
                for (int i = 0; i < results.length(); i++) {
                    JSONObject item = results.getJSONObject(i);
                    model.addRow(new Object[]{
                        (i + 1),
                        item.getString("mhs_nim"),
                        item.getString("mhs_nama"),
                        item.getString("mhs_jk"),
                        item.getInt("angkatan"),
                        item.getString("prodi")

                    });
                    tbMahasiswa.setModel(model);
                }
            }
        } catch (Exception e) {
        }
    }

    void loadAngkatan() {

        try {
            Angkatan an = new Angkatan();
            JSONObject obj = an.getAngkattan();

            int rows = obj.getInt("rows");
            JSONArray results = obj.getJSONArray("results");
            mahasiswa.setDataMhs(results);
            if (rows != 0) {
                for (int i = 0; i < results.length(); i++) {
                    JSONObject item = results.getJSONObject(i);
                    int angkatan = item.getInt("angkatan");
                    cAngkatan.addItem(String.valueOf(angkatan));

                }

            }
        } catch (Exception e) {
        }

    }

    void loadProdi() {

        try {
            Prodi pd = new Prodi();
            JSONObject obj = pd.getJurusan();

            int rows = obj.getInt("rows");
            JSONArray results = obj.getJSONArray("results");
            mahasiswa.setDataMhs(results);
            if (rows != 0) {
                for (int i = 0; i < results.length(); i++) {
                    JSONObject item = results.getJSONObject(i);
                    String prodi = item.getString("prodi");
                    cProdi.addItem(prodi);

                }

            }
        } catch (Exception e) {
        }

    }

    void tampilAngkatan() {

        try {
            Angkatan an = new Angkatan();
            JSONObject obj = an.tampilAngkatan();

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("No");
            model.addColumn("Nim");
            model.addColumn("Nama");
            model.addColumn("Jenis Kelamin");
            model.addColumn("Angkatan");
            model.addColumn("Prodi");

            int rows = obj.getInt("rows");
            JSONArray results = obj.getJSONArray("results");
            mahasiswa.setDataMhs(results);
            if (rows != 0) {
                for (int i = 0; i < results.length(); i++) {
                    JSONObject item = results.getJSONObject(i);
                    model.addRow(new Object[]{
                        (i + 1),
                        item.getString("mhs_nim"),
                        item.getString("mhs_nama"),
                        item.getString("mhs_jk"),
                        item.getInt("angkatan"),
                        item.getString("prodi")

                    });
                    tbMahasiswa.setModel(model);
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    void tampilProdi() {

        try {
            Prodi pd = new Prodi();
            JSONObject obj = pd.tampilJurusan();

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("No");
            model.addColumn("Nim");
            model.addColumn("Nama");
            model.addColumn("Jenis Kelamin");
            model.addColumn("Angkatan");
            model.addColumn("Prodi");

            int rows = obj.getInt("rows");
            JSONArray results = obj.getJSONArray("results");
            mahasiswa.setDataMhs(results);
            if (rows != 0) {
                for (int i = 0; i < results.length(); i++) {
                    JSONObject item = results.getJSONObject(i);
                    model.addRow(new Object[]{
                        (i + 1),
                        item.getString("mhs_nim"),
                        item.getString("mhs_nama"),
                        item.getString("mhs_jk"),
                        item.getInt("angkatan"),
                        item.getString("prodi")

                    });
                    tbMahasiswa.setModel(model);
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    void tampilDua() {

        try {
            mahasiswa mhs = new mahasiswa();
            JSONObject obj = mhs.tampilDua();

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("No");
            model.addColumn("Nim");
            model.addColumn("Nama");
            model.addColumn("Jenis Kelamin");
            model.addColumn("Angkatan");
            model.addColumn("Prodi");
            int rows = obj.getInt("rows");
            JSONArray results = obj.getJSONArray("results");
            mahasiswa.setDataMhs(results);
            if (rows != 0) {
                for (int i = 0; i < results.length(); i++) {
                    JSONObject item = results.getJSONObject(i);
                    model.addRow(new Object[]{
                        (i + 1),
                        item.getString("mhs_nim"),
                        item.getString("mhs_nama"),
                        item.getString("mhs_jk"),
                        item.getInt("angkatan"),
                        item.getString("prodi")

                    });
                    tbMahasiswa.setModel(model);
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    void tampilSearch() {

        try {
            mahasiswa mhs = new mahasiswa();
            JSONObject obj = mhs.search();

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("No");
            model.addColumn("Nim");
            model.addColumn("Nama");
            model.addColumn("Jenis Kelamin");
            model.addColumn("Angkatan");
            model.addColumn("Prodi");

            int rows = obj.getInt("rows");
            JSONArray results = obj.getJSONArray("results");
            mahasiswa.setDataMhs(results);
            if (rows != 0) {
                for (int i = 0; i < results.length(); i++) {
                    JSONObject item = results.getJSONObject(i);
                    model.addRow(new Object[]{
                        (i + 1),
                        item.getString("mhs_nim"),
                        item.getString("mhs_nama"),
                        item.getString("mhs_jk"),
                        item.getInt("angkatan"),
                        item.getString("prodi")
                    });
                    tbMahasiswa.setModel(model);
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
